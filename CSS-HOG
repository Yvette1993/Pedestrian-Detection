from __future__ import division

import numpy as np
import cv2
from PIL import Image
import math
from skimage import feature
import matplotlib.pyplot as plt
import time
start = time.clock()
  
    
def get_cellvalue(cell):
    
    H,S,V = cv2.split(cell)
    cellx,celly= 8,8
    Ih = np.sum(H)/(cellx*celly)
    Is = np.sum(S)/(cellx*celly)
    Iv = np.sum(V)/(cellx*celly) 
    return Ih,Is,Iv

def pixel_Simi(cell):

    Ih,Is,Iv = get_cellvalue(cell)
    #print Ih,Is,Iv
    H,S,V = cv2.split(cell)
    #print H,S.shape,V.shape
    
    cellx,celly= 8,8
    Simi_value = np.zeros((cellx,celly),dtype=float)
    for i in range(cellx):
        for j in range(celly):
            h,s,v = H[j,i],S[j,i],V[j,i]
            #print h
            #Simi_value[i,j] += math.sqrt((Ih - h)**2 + (Is - s)**2 + (Iv - v)**2)
                        
            Simi_value[i,j] += float(((Ih - h)**2 + (Is - s)**2 + (Iv - v)**2) / ((Ih+h) + (Is+s) + (Iv+v)))
           
    #print Simi_value        
    return Simi_value


def CSS_HOG(Simi_Img):
    img = Simi_Img.astype('uint8')
    """
    fd,hog_image = feature.hog(img, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualise=True, transform_sqrt=True, feature_vector=True)

    """
    cell_size = (8, 8)  
    block_size = (2, 2)  
    nbins = 9  
    hog = cv2.HOGDescriptor(_winSize=(img.shape[1] // cell_size[1] * cell_size[1],
                             img.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)
    n_cells = (img.shape[0] // cell_size[0], img.shape[1] // cell_size[1])   
    csshog_feats = hog.compute(img)
    """.reshape(n_cells[1] - block_size[1] + 1 ,
                                             n_cells[0] - block_size[0] + 1 ,
                        block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
    """
    return csshog_feats
    
    #return hog_image
    


def CSS(TrainPosHSV):
    CSSHOG_TrainPos = []
    for i in TrainPosHSV[:]:
        image = i
        
        sx,sy = 128,64
        cellx,celly= 8,8
        n_cellsx,n_cellsy = sx//cellx, sy//celly
        Simi_Img = np.zeros((sx,sy), dtype=float)
        for k in range(n_cellsx):
            for j in range(n_cellsy):
                cell = image[k*cellx:(k+1)*cellx , j*celly:(j+1)*celly]
                cell_Simi = pixel_Simi(cell)

                #print cell_Simi
                Simi_Img[k*cellx:(k+1)*cellx,j*celly:(j+1)*celly] += cell_Simi
        csshog_feats = CSS_HOG(Simi_Img)
        """
        hog_image = CSS_HOG(Simi_Img)
        plt.figure()
        plt.subplot(121)
        plt.title('CSS')
        plt.imshow(image,cmap='gray')
        plt.subplot(122)
        plt.title('CSS-HOG')
        plt.imshow(hog_image)
        plt.show()
        """
        CSSHOG_TrainPos.append(csshog_feats)            
    return CSSHOG_TrainPos


    TrainPosHSV = np.load('/home/yingyingli/code/CSS/INRIA_TrainPosHSV.npy')
    #CSS(TrainPosHSV)
    csshog_Pos =  CSS(TrainPosHSV)
    CSSHOG_Pos=np.save('/home/yingyingli/code/Pool/CSSHOG_TrainPos.npy', csshog_Pos)

    
end = time.clock()
print('Running time: %s Seconds'%(end-start))
