#!usr/bin/env python
#-*- coding: utf-8 -*-
from skimage.feature import local_binary_pattern
from skimage import feature
import skimage
import numpy as np
import matplotlib.pyplot as plt
import cv2
import time
start = time.clock()

TrainPos = np.load('~/load_img/INRIA_TrainPosImageDate.npy')

Lbphog_TrainPos = []


# settings for LBP
radius = 1
n_points = 8 * radius

for i in TrainPos[:]:
    image = i
    lbp = local_binary_pattern(image,n_points, radius,method='uniform').astype('uint8')
    """
    fd,hog_image = feature.hog(lbp, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualise=True, transform_sqrt=True, feature_vector=True)

    plt.figure()
    plt.subplot(131)
    plt.title('input')
    plt.imshow(image,cmap='gray')
    plt.subplot(132)
    plt.title('LBP')
    plt.imshow(lbp,cmap='gray')
    
    plt.subplot(133)
    plt.title('LBP-HOG')
    plt.imshow(hog_image)
    plt.show()
    
    """
    cell_size = (8, 8)  
    block_size = (2, 2)  # h x w in cells
    nbins = 9
        
    hog = cv2.HOGDescriptor(_winSize=(lbp.shape[1] // cell_size[1] * cell_size[1],
                             lbp.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)

    n_cells = (lbp.shape[0] // cell_size[0], lbp.shape[1] // cell_size[1])
        
    hog_feats = hog.compute(lbp)
    """.reshape(n_cells[1] - block_size[1] + 1 ,
                                             n_cells[0] - block_size[0] + 1 ,
                        block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
    
    
    'uniform': improved rotation invariance with uniform patterns and finer 
               quantization of the angular space which is gray scale and
               rotation invariant.
    """
    Lbphog_TrainPos.append(hog_feats)
Lbphog_TrainPos=np.save('~/lbphog_TrainPos.npy',Lbphog_TrainPos)


                 

end = time.clock()
print('Running time:%s Seconds'%(end-start))

