from __future__ import division

import numpy as np
import cv2
from PIL import Image
import math

import time
start = time.clock()
  
    
def get_cellvalue(cell):
    
    H,S,V = cv2.split(cell)
    cellx,celly= 8,8
    Ih = np.sum(H)/(cellx*celly)
    Is = np.sum(S)/(cellx*celly)
    Iv = np.sum(V)/(cellx*celly) 
    return Ih,Is,Iv

def pixel_Simi(cell):

    Ih,Is,Iv = get_cellvalue(cell)
    #print Ih,Is,Iv
    H,S,V = cv2.split(cell)
    #print H,S.shape,V.shape
    
    cellx,celly= 8,8
    Simi_value = np.zeros((cellx,celly),dtype=float)
    for i in range(cellx):
        for j in range(celly):
            h,s,v = H[j,i],S[j,i],V[j,i]
            #print h
            #Simi_value[i,j] += math.sqrt((Ih - h)**2 + (Is - s)**2 + (Iv - v)**2)
                        
            Simi_value[i,j] += float(((Ih - h)**2 + (Is - s)**2 + (Iv - v)**2) / ((Ih+h) + (Is+s) + (Iv+v)))
           
    #print Simi_value        
    return Simi_value




def CSS(TrainPosHSV):
    CSS_TrainPos = []
    for i in TrainPosHSV[:]:
        image = i
        sx,sy = 128,64
        cellx,celly= 8,8
        n_cellsx,n_cellsy = sx//cellx, sy//celly
        Simi_Img = np.zeros((sx,sy), dtype=float)
        for k in range(n_cellsx):
            for j in range(n_cellsy):
                cell = image[k*cellx:(k+1)*cellx , j*celly:(j+1)*celly]
                cell_Simi = pixel_Simi(cell)
                #print cell_Simi
                Simi_Img[k*cellx:(k+1)*cellx,j*celly:(j+1)*celly] += cell_Simi
        
        CSS_TrainPos.append(Simi_Img)            
    return CSS_TrainPos
    
if __name__ == "__main__":


    TrainPosHSV = np.load('/home/yingyingli/code/CSS/INRIA_TrainPosHSV.npy')
    css_Pos =  CSS(TrainPosHSV)
    CSS_Pos=np.save('/home/yingyingli/code/Pool/CSS_TrainPos.npy', css_Pos)
    
end = time.clock()
print('Running time: %s Seconds'%(end-start))
