
from __future__ import print_function

import numpy as np
import cv2
import matplotlib.pyplot as plt
 
import time
start = time.clock()

if __name__ =="__main__":
    
    TrainPosImageDate = np.load('~/load_img/INRIA_TrainPosImageDate.npy')
    TrainNegImageDate = np.load('~/load_img/INRIA_TrainNegImageDate.npy')
    Trainhog_Posdate = []
    Trainhog_Negdate = []
    
    for i in TrainPosImageDate[:]:
        img = i
        cell_size = (8, 8)  
        block_size = (2, 2)  
        nbins = 9
        
        hog = cv2.HOGDescriptor(_winSize=(img.shape[1] // cell_size[1] * cell_size[1],
                             img.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)

        n_cells = (img.shape[0] // cell_size[0], img.shape[1] // cell_size[1])
        
        hog_feats = hog.compute(img)
        """    .reshape(n_cells[1] - block_size[1] + 1 ,\
                                             n_cells[0] - block_size[0] + 1 ,\
                                         block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
        """
        Trainhog_Posdate.append(hog_feats)
    HogFeature_PosImageDate=np.save('~/Hog_TrainPos.npy', Trainhog_Posdate)
        
    
    for i in TrainNegImageDate[:]:
        img = i
        cell_size = (8, 8)  
        block_size = (2, 2)  
        nbins = 9
        
        hog = cv2.HOGDescriptor(_winSize=(img.shape[1] // cell_size[1] * cell_size[1],
                             img.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)

        n_cells = (img.shape[0] // cell_size[0], img.shape[1] // cell_size[1])
        
        hog_feats = hog.compute(img)
        """.reshape(n_cells[1] - block_size[1] + 1 ,
                                             n_cells[0] - block_size[0] + 1 ,
                        block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
        """

        Trainhog_Negdate.append(hog_feats)
    HogFeature_NegImageDate=np.save('~/Hog_TrainNeg.npy',Trainhog_Negdate)
    
    
    TestPosImageDate = np.load('~/load_img/INRIA_TestPosImageDate.npy')
    TestNegImageDate = np.load('~/load_img/INRIA_TestNegImageDate.npy')
    Testhog_Posdate = []
    Testhog_Negdate = []
    
    for i in TestPosImageDate[:]:
        img = i
        cell_size = (8, 8)  
        block_size = (2, 2) 
        nbins = 9
        
        hog = cv2.HOGDescriptor(_winSize=(img.shape[1] // cell_size[1] * cell_size[1],
                             img.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)

        n_cells = (img.shape[0] // cell_size[0], img.shape[1] // cell_size[1])
        
        hog_feats = hog.compute(img)
        """.reshape(n_cells[1] - block_size[1] + 1 ,
                                             n_cells[0] - block_size[0] + 1 ,
                        block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
        """

        Testhog_Posdate.append(hog_feats)
    HogFeature_PosImageDate=np.save('~/Hog_TestPos.npy', Testhog_Posdate)   
    
    for i in TestNegImageDate[:]:
        img = i
        cell_size = (8, 8)  
        block_size = (2, 2)  # h x w in cells
        nbins = 9
        
        hog = cv2.HOGDescriptor(_winSize=(img.shape[1] // cell_size[1] * cell_size[1],
                             img.shape[0] // cell_size[0] * cell_size[0]),
                   _blockSize=(block_size[1] * cell_size[1],
                               block_size[0] * cell_size[0]),
                   _blockStride=(cell_size[1], cell_size[0]),
                   _cellSize=(cell_size[1], cell_size[0]),
                   _nbins=nbins)

        n_cells = (img.shape[0] // cell_size[0], img.shape[1] // cell_size[1])
        
        hog_feats = hog.compute(img)
        """.reshape(n_cells[1] - block_size[1] + 1 ,
                                             n_cells[0] - block_size[0] + 1 ,
                        block_size[0], block_size[1], nbins) \
               .transpose((1, 0, 2, 3, 4))
        """

        Testhog_Negdate.append(hog_feats)
    HogFeature_NegImageDate=np.save('~/Hog_TestNeg.npy',Testhog_Negdate)


    


end = time.clock()
print('Running time:%s Seconds'%(end-start))


